
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Oct 23 11:23:47 EDT 2019
//----------------------------------------------------

package compiler488.parser;

import compiler488.ast.*;
import compiler488.ast.expn.*;
import compiler488.ast.decl.*;
import compiler488.ast.stmt.*;
import compiler488.ast.type.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Oct 23 11:23:47 EDT 2019
  */
public class BaseParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public BaseParser() {super();}

  /** Constructor which sets the default scanner. */
  public BaseParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public BaseParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\131\000\002\002\004\000\002\002\003\000\002\005" +
    "\006\000\002\005\005\000\002\005\004\000\002\006\003" +
    "\000\002\006\004\000\002\007\003\000\002\007\004\000" +
    "\002\003\003\000\002\003\003\000\002\010\006\000\002" +
    "\010\010\000\002\010\006\000\002\010\006\000\002\010" +
    "\003\000\002\010\004\000\002\010\005\000\002\010\006" +
    "\000\002\010\005\000\002\010\003\000\002\010\004\000" +
    "\002\010\004\000\002\010\003\000\002\010\003\000\002" +
    "\011\006\000\002\011\010\000\002\026\003\000\002\026" +
    "\006\000\002\004\006\000\002\004\007\000\002\004\012" +
    "\000\002\004\005\000\002\004\010\000\002\012\003\000" +
    "\002\012\005\000\002\021\003\000\002\021\006\000\002" +
    "\021\010\000\002\024\003\000\002\024\006\000\002\025" +
    "\003\000\002\025\004\000\002\014\003\000\002\014\003" +
    "\000\002\023\003\000\002\023\005\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\022\003\000\002" +
    "\022\005\000\002\016\003\000\002\016\005\000\002\015" +
    "\003\000\002\015\005\000\002\027\005\000\002\017\003" +
    "\000\002\017\005\000\002\030\003\000\002\030\005\000" +
    "\002\031\003\000\002\031\004\000\002\032\003\000\002" +
    "\032\005\000\002\032\006\000\002\032\005\000\002\032" +
    "\006\000\002\032\005\000\002\032\006\000\002\033\003" +
    "\000\002\033\005\000\002\033\005\000\002\034\003\000" +
    "\002\034\005\000\002\034\005\000\002\035\003\000\002" +
    "\035\004\000\002\036\003\000\002\036\003\000\002\036" +
    "\006\000\002\036\005\000\002\036\011\000\002\037\003" +
    "\000\002\037\003\000\002\037\003\000\002\020\003\000" +
    "\002\020\006\000\002\020\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\260\000\004\040\006\001\002\000\004\002\262\001" +
    "\002\000\004\002\000\001\002\000\034\013\021\014\011" +
    "\017\010\020\022\021\012\022\032\023\020\027\033\031" +
    "\017\033\023\040\006\041\024\055\016\001\002\000\032" +
    "\013\ufffa\014\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023" +
    "\ufffa\027\ufffa\031\ufffa\033\ufffa\040\ufffa\055\ufffa\001\002" +
    "\000\036\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023" +
    "\ufff2\026\ufff2\030\256\031\ufff2\033\ufff2\040\ufff2\041\ufff2" +
    "\055\ufff2\056\255\001\002\000\004\055\247\001\002\000" +
    "\004\055\244\001\002\000\032\016\uffe9\017\uffe9\020\uffe9" +
    "\021\uffe9\022\uffe9\023\uffe9\026\uffe9\031\uffe9\033\uffe9\040" +
    "\uffe9\041\uffe9\055\uffe9\001\002\000\032\016\uffea\017\uffea" +
    "\020\uffea\021\uffea\022\uffea\023\uffea\026\uffea\031\uffea\033" +
    "\uffea\040\uffea\041\uffea\055\uffea\001\002\000\030\017\ufffc" +
    "\020\ufffc\021\ufffc\022\ufffc\023\ufffc\026\ufffc\031\ufffc\033" +
    "\ufffc\040\ufffc\041\ufffc\055\ufffc\001\002\000\040\016\uffe6" +
    "\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\026\uffe6\031" +
    "\uffe6\033\uffe6\034\237\036\150\040\uffe6\041\uffe6\050\uffab" +
    "\055\uffe6\001\002\000\020\006\105\007\074\010\077\034" +
    "\104\052\066\055\070\056\106\001\002\000\034\016\uffed" +
    "\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed\026\uffed\031" +
    "\uffed\032\232\033\uffed\040\uffed\041\uffed\055\uffed\001\002" +
    "\000\004\055\212\001\002\000\020\006\105\007\074\010" +
    "\077\034\104\052\066\055\070\056\106\001\002\000\024" +
    "\006\105\007\074\010\077\024\200\034\104\052\066\055" +
    "\070\056\106\057\174\001\002\000\042\002\ufffd\013\ufffd" +
    "\014\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\023" +
    "\ufffd\026\ufffd\027\ufffd\031\ufffd\033\ufffd\040\ufffd\041\ufffd" +
    "\055\ufffd\001\002\000\032\013\021\014\011\017\010\020" +
    "\022\021\012\022\032\023\020\027\033\031\017\033\023" +
    "\040\006\055\016\001\002\000\004\050\166\001\002\000" +
    "\032\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8" +
    "\026\ufff8\031\ufff8\033\ufff8\040\ufff8\041\ufff8\055\ufff8\001" +
    "\002\000\026\017\010\020\022\021\012\022\032\023\020" +
    "\031\017\033\023\040\006\041\165\055\016\001\002\000" +
    "\032\016\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7" +
    "\026\ufff7\031\ufff7\033\ufff7\040\ufff7\041\ufff7\055\ufff7\001" +
    "\002\000\024\017\010\020\022\021\012\022\032\023\020" +
    "\031\017\033\023\040\006\055\016\001\002\000\004\055" +
    "\035\001\002\000\006\045\uffdf\050\uffdf\001\002\000\010" +
    "\036\045\045\uffdd\050\uffdd\001\002\000\006\045\037\050" +
    "\040\001\002\000\004\055\035\001\002\000\006\011\043" +
    "\012\041\001\002\000\036\013\uffd6\014\uffd6\017\uffd6\020" +
    "\uffd6\021\uffd6\022\uffd6\023\uffd6\027\uffd6\031\uffd6\033\uffd6" +
    "\035\uffd6\040\uffd6\045\uffd6\055\uffd6\001\002\000\032\013" +
    "\uffe4\014\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4" +
    "\027\uffe4\031\uffe4\033\uffe4\040\uffe4\055\uffe4\001\002\000" +
    "\036\013\uffd5\014\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5" +
    "\023\uffd5\027\uffd5\031\uffd5\033\uffd5\035\uffd5\040\uffd5\045" +
    "\uffd5\055\uffd5\001\002\000\006\045\uffde\050\uffde\001\002" +
    "\000\006\052\051\056\046\001\002\000\010\037\uffda\045" +
    "\uffda\046\uffd8\001\002\000\004\046\057\001\002\000\006" +
    "\037\054\045\053\001\002\000\004\056\052\001\002\000" +
    "\010\037\uffd7\045\uffd7\046\uffd7\001\002\000\006\052\051" +
    "\056\046\001\002\000\006\045\uffdc\050\uffdc\001\002\000" +
    "\004\037\056\001\002\000\006\045\uffdb\050\uffdb\001\002" +
    "\000\004\046\060\001\002\000\006\052\051\056\061\001" +
    "\002\000\006\037\uffd8\045\uffd8\001\002\000\006\037\uffd9" +
    "\045\uffd9\001\002\000\026\017\010\020\022\021\012\022" +
    "\032\023\020\026\065\031\017\033\023\040\006\055\016" +
    "\001\002\000\030\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023" +
    "\ufffb\026\ufffb\031\ufffb\033\ufffb\040\ufffb\041\ufffb\055\ufffb" +
    "\001\002\000\020\006\105\007\074\010\077\034\104\052" +
    "\066\055\070\056\106\001\002\000\016\007\074\010\077" +
    "\034\104\052\066\055\070\056\106\001\002\000\054\004" +
    "\115\005\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8" +
    "\022\uffc8\023\uffc8\025\uffc8\026\uffc8\031\uffc8\033\uffc8\035" +
    "\uffc8\037\uffc8\040\uffc8\041\uffc8\045\uffc8\047\uffc8\050\uffc8" +
    "\055\uffc8\001\002\000\100\004\uffab\005\uffab\006\uffab\015" +
    "\uffab\016\uffab\017\uffab\020\uffab\021\uffab\022\uffab\023\uffab" +
    "\025\uffab\026\uffab\031\uffab\033\uffab\034\151\035\uffab\036" +
    "\150\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab" +
    "\045\uffab\047\uffab\050\uffab\051\uffab\052\uffab\053\uffab\054" +
    "\uffab\055\uffab\001\002\000\074\004\uffb5\005\uffb5\006\uffb5" +
    "\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023" +
    "\uffb5\025\uffb5\026\uffb5\031\uffb5\033\uffb5\035\uffb5\037\uffb5" +
    "\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\047" +
    "\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5" +
    "\001\002\000\070\004\uffc2\005\uffc2\006\127\015\uffc2\016" +
    "\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\025\uffc2" +
    "\026\uffc2\031\uffc2\033\uffc2\035\uffc2\037\uffc2\040\uffc2\041" +
    "\uffc2\042\132\043\130\044\134\045\uffc2\047\uffc2\050\uffc2" +
    "\051\131\052\133\055\uffc2\001\002\000\074\004\uffbb\005" +
    "\uffbb\006\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb" +
    "\022\uffbb\023\uffbb\025\uffbb\026\uffbb\031\uffbb\033\uffbb\035" +
    "\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb" +
    "\045\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053\124\054" +
    "\123\055\uffbb\001\002\000\074\004\uffad\005\uffad\006\uffad" +
    "\015\uffad\016\uffad\017\uffad\020\uffad\021\uffad\022\uffad\023" +
    "\uffad\025\uffad\026\uffad\031\uffad\033\uffad\035\uffad\037\uffad" +
    "\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad\047" +
    "\uffad\050\uffad\051\uffad\052\uffad\053\uffad\054\uffad\055\uffad" +
    "\001\002\000\074\004\uffb2\005\uffb2\006\uffb2\015\uffb2\016" +
    "\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\025\uffb2" +
    "\026\uffb2\031\uffb2\033\uffb2\035\uffb2\037\uffb2\040\uffb2\041" +
    "\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\047\uffb2\050\uffb2" +
    "\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2\001\002\000" +
    "\054\004\uffc6\005\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6" +
    "\021\uffc6\022\uffc6\023\uffc6\025\uffc6\026\uffc6\031\uffc6\033" +
    "\uffc6\035\uffc6\037\uffc6\040\uffc6\041\uffc6\045\uffc6\047\uffc6" +
    "\050\uffc6\055\uffc6\001\002\000\074\004\uffac\005\uffac\006" +
    "\uffac\015\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac" +
    "\023\uffac\025\uffac\026\uffac\031\uffac\033\uffac\035\uffac\037" +
    "\uffac\040\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac" +
    "\047\uffac\050\uffac\051\uffac\052\uffac\053\uffac\054\uffac\055" +
    "\uffac\001\002\000\074\004\uffb3\005\uffb3\006\uffb3\015\uffb3" +
    "\016\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3\025" +
    "\uffb3\026\uffb3\031\uffb3\033\uffb3\035\uffb3\037\uffb3\040\uffb3" +
    "\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\047\uffb3\050" +
    "\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3\001\002" +
    "\000\034\005\113\016\ufff3\017\ufff3\020\ufff3\021\ufff3\022" +
    "\ufff3\023\ufff3\026\ufff3\031\ufff3\033\ufff3\040\ufff3\041\ufff3" +
    "\055\ufff3\001\002\000\074\004\uffb8\005\uffb8\006\uffb8\015" +
    "\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8" +
    "\025\uffb8\026\uffb8\031\uffb8\033\uffb8\035\uffb8\037\uffb8\040" +
    "\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8\047\uffb8" +
    "\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8\001" +
    "\002\000\054\004\uffc4\005\uffc4\015\uffc4\016\uffc4\017\uffc4" +
    "\020\uffc4\021\uffc4\022\uffc4\023\uffc4\025\uffc4\026\uffc4\031" +
    "\uffc4\033\uffc4\035\uffc4\037\uffc4\040\uffc4\041\uffc4\045\uffc4" +
    "\047\uffc4\050\uffc4\055\uffc4\001\002\000\020\006\105\007" +
    "\074\010\077\034\104\052\066\055\070\056\106\001\002" +
    "\000\020\006\105\007\074\010\077\034\104\052\066\055" +
    "\070\056\106\001\002\000\074\004\uffae\005\uffae\006\uffae" +
    "\015\uffae\016\uffae\017\uffae\020\uffae\021\uffae\022\uffae\023" +
    "\uffae\025\uffae\026\uffae\031\uffae\033\uffae\035\uffae\037\uffae" +
    "\040\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae\047" +
    "\uffae\050\uffae\051\uffae\052\uffae\053\uffae\054\uffae\055\uffae" +
    "\001\002\000\054\004\uffc3\005\uffc3\015\uffc3\016\uffc3\017" +
    "\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\025\uffc3\026\uffc3" +
    "\031\uffc3\033\uffc3\035\uffc3\037\uffc3\040\uffc3\041\uffc3\045" +
    "\uffc3\047\uffc3\050\uffc3\055\uffc3\001\002\000\010\005\113" +
    "\035\111\047\112\001\002\000\074\004\uffb0\005\uffb0\006" +
    "\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0" +
    "\023\uffb0\025\uffb0\026\uffb0\031\uffb0\033\uffb0\035\uffb0\037" +
    "\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0" +
    "\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0\055" +
    "\uffb0\001\002\000\020\006\105\007\074\010\077\034\104" +
    "\052\066\055\070\056\106\001\002\000\020\006\105\007" +
    "\074\010\077\034\104\052\066\055\070\056\106\001\002" +
    "\000\054\004\115\005\uffc7\015\uffc7\016\uffc7\017\uffc7\020" +
    "\uffc7\021\uffc7\022\uffc7\023\uffc7\025\uffc7\026\uffc7\031\uffc7" +
    "\033\uffc7\035\uffc7\037\uffc7\040\uffc7\041\uffc7\045\uffc7\047" +
    "\uffc7\050\uffc7\055\uffc7\001\002\000\020\006\105\007\074" +
    "\010\077\034\104\052\066\055\070\056\106\001\002\000" +
    "\054\004\uffc5\005\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5" +
    "\021\uffc5\022\uffc5\023\uffc5\025\uffc5\026\uffc5\031\uffc5\033" +
    "\uffc5\035\uffc5\037\uffc5\040\uffc5\041\uffc5\045\uffc5\047\uffc5" +
    "\050\uffc5\055\uffc5\001\002\000\006\005\113\050\120\001" +
    "\002\000\020\006\105\007\074\010\077\034\104\052\066" +
    "\055\070\056\106\001\002\000\006\005\113\035\122\001" +
    "\002\000\074\004\uffaf\005\uffaf\006\uffaf\015\uffaf\016\uffaf" +
    "\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\025\uffaf\026" +
    "\uffaf\031\uffaf\033\uffaf\035\uffaf\037\uffaf\040\uffaf\041\uffaf" +
    "\042\uffaf\043\uffaf\044\uffaf\045\uffaf\047\uffaf\050\uffaf\051" +
    "\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf\001\002\000\016" +
    "\007\074\010\077\034\104\052\066\055\070\056\106\001" +
    "\002\000\016\007\074\010\077\034\104\052\066\055\070" +
    "\056\106\001\002\000\074\004\uffb7\005\uffb7\006\uffb7\015" +
    "\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7" +
    "\025\uffb7\026\uffb7\031\uffb7\033\uffb7\035\uffb7\037\uffb7\040" +
    "\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\047\uffb7" +
    "\050\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7\055\uffb7\001" +
    "\002\000\074\004\uffb6\005\uffb6\006\uffb6\015\uffb6\016\uffb6" +
    "\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\025\uffb6\026" +
    "\uffb6\031\uffb6\033\uffb6\035\uffb6\037\uffb6\040\uffb6\041\uffb6" +
    "\042\uffb6\043\uffb6\044\uffb6\045\uffb6\047\uffb6\050\uffb6\051" +
    "\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\001\002\000\004" +
    "\042\146\001\002\000\020\007\074\010\077\034\104\042" +
    "\144\052\066\055\070\056\106\001\002\000\016\007\074" +
    "\010\077\034\104\052\066\055\070\056\106\001\002\000" +
    "\016\007\074\010\077\034\104\052\066\055\070\056\106" +
    "\001\002\000\016\007\074\010\077\034\104\052\066\055" +
    "\070\056\106\001\002\000\020\007\074\010\077\034\104" +
    "\042\136\052\066\055\070\056\106\001\002\000\060\004" +
    "\uffbf\005\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf" +
    "\022\uffbf\023\uffbf\025\uffbf\026\uffbf\031\uffbf\033\uffbf\035" +
    "\uffbf\037\uffbf\040\uffbf\041\uffbf\045\uffbf\047\uffbf\050\uffbf" +
    "\051\131\052\133\055\uffbf\001\002\000\016\007\074\010" +
    "\077\034\104\052\066\055\070\056\106\001\002\000\060" +
    "\004\uffbe\005\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021" +
    "\uffbe\022\uffbe\023\uffbe\025\uffbe\026\uffbe\031\uffbe\033\uffbe" +
    "\035\uffbe\037\uffbe\040\uffbe\041\uffbe\045\uffbe\047\uffbe\050" +
    "\uffbe\051\131\052\133\055\uffbe\001\002\000\074\004\uffb9" +
    "\005\uffb9\006\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021" +
    "\uffb9\022\uffb9\023\uffb9\025\uffb9\026\uffb9\031\uffb9\033\uffb9" +
    "\035\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044" +
    "\uffb9\045\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\124" +
    "\054\123\055\uffb9\001\002\000\060\004\uffc1\005\uffc1\015" +
    "\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1" +
    "\025\uffc1\026\uffc1\031\uffc1\033\uffc1\035\uffc1\037\uffc1\040" +
    "\uffc1\041\uffc1\045\uffc1\047\uffc1\050\uffc1\051\131\052\133" +
    "\055\uffc1\001\002\000\074\004\uffba\005\uffba\006\uffba\015" +
    "\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba" +
    "\025\uffba\026\uffba\031\uffba\033\uffba\035\uffba\037\uffba\040" +
    "\uffba\041\uffba\042\uffba\043\uffba\044\uffba\045\uffba\047\uffba" +
    "\050\uffba\051\uffba\052\uffba\053\124\054\123\055\uffba\001" +
    "\002\000\060\004\uffbd\005\uffbd\015\uffbd\016\uffbd\017\uffbd" +
    "\020\uffbd\021\uffbd\022\uffbd\023\uffbd\025\uffbd\026\uffbd\031" +
    "\uffbd\033\uffbd\035\uffbd\037\uffbd\040\uffbd\041\uffbd\045\uffbd" +
    "\047\uffbd\050\uffbd\051\131\052\133\055\uffbd\001\002\000" +
    "\016\007\074\010\077\034\104\052\066\055\070\056\106" +
    "\001\002\000\060\004\uffbc\005\uffbc\015\uffbc\016\uffbc\017" +
    "\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\025\uffbc\026\uffbc" +
    "\031\uffbc\033\uffbc\035\uffbc\037\uffbc\040\uffbc\041\uffbc\045" +
    "\uffbc\047\uffbc\050\uffbc\051\131\052\133\055\uffbc\001\002" +
    "\000\016\007\074\010\077\034\104\052\066\055\070\056" +
    "\106\001\002\000\060\004\uffc0\005\uffc0\015\uffc0\016\uffc0" +
    "\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\025\uffc0\026" +
    "\uffc0\031\uffc0\033\uffc0\035\uffc0\037\uffc0\040\uffc0\041\uffc0" +
    "\045\uffc0\047\uffc0\050\uffc0\051\131\052\133\055\uffc0\001" +
    "\002\000\020\006\105\007\074\010\077\034\104\052\066" +
    "\055\070\056\106\001\002\000\020\006\105\007\074\010" +
    "\077\034\104\052\066\055\070\056\106\001\002\000\010" +
    "\005\113\035\uffcd\045\uffcd\001\002\000\006\035\155\045" +
    "\154\001\002\000\020\006\105\007\074\010\077\034\104" +
    "\052\066\055\070\056\106\001\002\000\074\004\uffb1\005" +
    "\uffb1\006\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1" +
    "\022\uffb1\023\uffb1\025\uffb1\026\uffb1\031\uffb1\033\uffb1\035" +
    "\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1" +
    "\045\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054" +
    "\uffb1\055\uffb1\001\002\000\010\005\113\035\uffcc\045\uffcc" +
    "\001\002\000\010\005\113\037\161\045\160\001\002\000" +
    "\020\006\105\007\074\010\077\034\104\052\066\055\070" +
    "\056\106\001\002\000\074\004\uffaa\005\uffaa\006\uffaa\015" +
    "\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa" +
    "\025\uffaa\026\uffaa\031\uffaa\033\uffaa\035\uffaa\037\uffaa\040" +
    "\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\047\uffaa" +
    "\050\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa\055\uffaa\001" +
    "\002\000\006\005\113\037\163\001\002\000\074\004\uffa9" +
    "\005\uffa9\006\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021" +
    "\uffa9\022\uffa9\023\uffa9\025\uffa9\026\uffa9\031\uffa9\033\uffa9" +
    "\035\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044" +
    "\uffa9\045\uffa9\047\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9" +
    "\054\uffa9\055\uffa9\001\002\000\074\004\uffb4\005\uffb4\006" +
    "\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4" +
    "\023\uffb4\025\uffb4\026\uffb4\031\uffb4\033\uffb4\035\uffb4\037" +
    "\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4" +
    "\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055" +
    "\uffb4\001\002\000\042\002\ufffe\013\ufffe\014\ufffe\016\ufffe" +
    "\017\ufffe\020\ufffe\021\ufffe\022\ufffe\023\ufffe\026\ufffe\027" +
    "\ufffe\031\ufffe\033\ufffe\040\ufffe\041\ufffe\055\ufffe\001\002" +
    "\000\004\042\167\001\002\000\020\006\105\007\074\010" +
    "\077\034\104\052\066\055\070\056\106\001\002\000\034" +
    "\005\113\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023" +
    "\ufff6\026\ufff6\031\ufff6\033\ufff6\040\ufff6\041\ufff6\055\ufff6" +
    "\001\002\000\032\013\ufff9\014\ufff9\017\ufff9\020\ufff9\021" +
    "\ufff9\022\ufff9\023\ufff9\027\ufff9\031\ufff9\033\ufff9\040\ufff9" +
    "\055\ufff9\001\002\000\026\017\010\020\022\021\012\022" +
    "\032\023\020\031\017\033\023\040\006\041\173\055\016" +
    "\001\002\000\042\002\uffff\013\uffff\014\uffff\016\uffff\017" +
    "\uffff\020\uffff\021\uffff\022\uffff\023\uffff\026\uffff\027\uffff" +
    "\031\uffff\033\uffff\040\uffff\041\uffff\055\uffff\001\002\000" +
    "\034\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1" +
    "\026\uffd1\031\uffd1\033\uffd1\040\uffd1\041\uffd1\045\uffd1\055" +
    "\uffd1\001\002\000\034\016\uffec\017\uffec\020\uffec\021\uffec" +
    "\022\uffec\023\uffec\026\uffec\031\uffec\033\uffec\040\uffec\041" +
    "\uffec\045\201\055\uffec\001\002\000\034\016\uffd4\017\uffd4" +
    "\020\uffd4\021\uffd4\022\uffd4\023\uffd4\026\uffd4\031\uffd4\033" +
    "\uffd4\040\uffd4\041\uffd4\045\uffd4\055\uffd4\001\002\000\036" +
    "\005\113\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023" +
    "\uffd2\026\uffd2\031\uffd2\033\uffd2\040\uffd2\041\uffd2\045\uffd2" +
    "\055\uffd2\001\002\000\034\016\uffd0\017\uffd0\020\uffd0\021" +
    "\uffd0\022\uffd0\023\uffd0\026\uffd0\031\uffd0\033\uffd0\040\uffd0" +
    "\041\uffd0\045\uffd0\055\uffd0\001\002\000\024\006\105\007" +
    "\074\010\077\024\200\034\104\052\066\055\070\056\106" +
    "\057\174\001\002\000\034\016\uffd3\017\uffd3\020\uffd3\021" +
    "\uffd3\022\uffd3\023\uffd3\026\uffd3\031\uffd3\033\uffd3\040\uffd3" +
    "\041\uffd3\045\uffd3\055\uffd3\001\002\000\006\005\113\025" +
    "\204\001\002\000\024\017\010\020\022\021\012\022\032" +
    "\023\020\031\017\033\023\040\006\055\016\001\002\000" +
    "\032\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8" +
    "\026\uffe8\031\uffe8\033\uffe8\040\uffe8\041\uffe8\055\uffe8\001" +
    "\002\000\032\016\207\017\ufff8\020\ufff8\021\ufff8\022\ufff8" +
    "\023\ufff8\026\ufff8\031\ufff8\033\ufff8\040\ufff8\041\ufff8\055" +
    "\ufff8\001\002\000\024\017\010\020\022\021\012\022\032" +
    "\023\020\031\017\033\023\040\006\055\016\001\002\000" +
    "\032\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7" +
    "\026\uffe7\031\uffe7\033\uffe7\040\uffe7\041\uffe7\055\uffe7\001" +
    "\002\000\032\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5" +
    "\023\ufff5\026\ufff5\031\ufff5\033\ufff5\040\ufff5\041\ufff5\055" +
    "\ufff5\001\002\000\006\034\213\050\214\001\002\000\004" +
    "\055\220\001\002\000\006\011\043\012\041\001\002\000" +
    "\004\040\006\001\002\000\032\013\uffe3\014\uffe3\017\uffe3" +
    "\020\uffe3\021\uffe3\022\uffe3\023\uffe3\027\uffe3\031\uffe3\033" +
    "\uffe3\040\uffe3\055\uffe3\001\002\000\006\035\225\045\224" +
    "\001\002\000\004\050\222\001\002\000\006\035\uffcb\045" +
    "\uffcb\001\002\000\006\011\043\012\041\001\002\000\006" +
    "\035\uffc9\045\uffc9\001\002\000\004\055\220\001\002\000" +
    "\004\050\226\001\002\000\006\011\043\012\041\001\002" +
    "\000\004\040\006\001\002\000\032\013\uffe2\014\uffe2\017" +
    "\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\027\uffe2\031\uffe2" +
    "\033\uffe2\040\uffe2\055\uffe2\001\002\000\006\035\uffca\045" +
    "\uffca\001\002\000\020\006\105\007\074\010\077\034\104" +
    "\052\066\055\070\056\106\001\002\000\034\005\113\016" +
    "\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee\026\uffee" +
    "\031\uffee\033\uffee\040\uffee\041\uffee\055\uffee\001\002\000" +
    "\006\005\113\015\235\001\002\000\024\017\010\020\022" +
    "\021\012\022\032\023\020\031\017\033\023\040\006\055" +
    "\016\001\002\000\032\016\ufff4\017\ufff4\020\ufff4\021\ufff4" +
    "\022\ufff4\023\ufff4\026\ufff4\031\ufff4\033\ufff4\040\ufff4\041" +
    "\ufff4\055\ufff4\001\002\000\020\006\105\007\074\010\077" +
    "\034\104\052\066\055\070\056\106\001\002\000\006\035" +
    "\241\045\154\001\002\000\032\016\uffe5\017\uffe5\020\uffe5" +
    "\021\uffe5\022\uffe5\023\uffe5\026\uffe5\031\uffe5\033\uffe5\040" +
    "\uffe5\041\uffe5\055\uffe5\001\002\000\034\016\uffeb\017\uffeb" +
    "\020\uffeb\021\uffeb\022\uffeb\023\uffeb\026\uffeb\031\uffeb\033" +
    "\uffeb\040\uffeb\041\uffeb\045\245\055\uffeb\001\002\000\034" +
    "\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\026" +
    "\uffcf\031\uffcf\033\uffcf\040\uffcf\041\uffcf\045\uffcf\055\uffcf" +
    "\001\002\000\036\016\uffab\017\uffab\020\uffab\021\uffab\022" +
    "\uffab\023\uffab\026\uffab\031\uffab\033\uffab\036\150\040\uffab" +
    "\041\uffab\045\uffab\055\uffab\001\002\000\004\055\244\001" +
    "\002\000\034\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce" +
    "\023\uffce\026\uffce\031\uffce\033\uffce\040\uffce\041\uffce\045" +
    "\uffce\055\uffce\001\002\000\006\034\250\040\006\001\002" +
    "\000\004\055\220\001\002\000\032\013\uffe1\014\uffe1\017" +
    "\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\027\uffe1\031\uffe1" +
    "\033\uffe1\040\uffe1\055\uffe1\001\002\000\006\035\253\045" +
    "\224\001\002\000\004\040\006\001\002\000\032\013\uffe0" +
    "\014\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\027" +
    "\uffe0\031\uffe0\033\uffe0\040\uffe0\055\uffe0\001\002\000\034" +
    "\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\026" +
    "\ufff1\030\260\031\ufff1\033\ufff1\040\ufff1\041\ufff1\055\ufff1" +
    "\001\002\000\020\006\105\007\074\010\077\034\104\052" +
    "\066\055\070\056\106\001\002\000\034\005\113\016\ufff0" +
    "\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\026\ufff0\031" +
    "\ufff0\033\ufff0\040\ufff0\041\ufff0\055\ufff0\001\002\000\020" +
    "\006\105\007\074\010\077\034\104\052\066\055\070\056" +
    "\106\001\002\000\034\005\113\016\uffef\017\uffef\020\uffef" +
    "\021\uffef\022\uffef\023\uffef\026\uffef\031\uffef\033\uffef\040" +
    "\uffef\041\uffef\055\uffef\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\260\000\006\002\003\005\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\003\014\004\006\005\012" +
    "\006\027\007\024\010\026\011\030\020\025\026\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\020\242\022\241\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\017\233\020\074\030\066\031\075\032\102\033\071\034" +
    "\072\035\101\036\070\037\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\017\202\020\074\030\066\031" +
    "\075\032\102\033\071\034\072\035\101\036\070\037\077" +
    "\001\001\000\032\013\175\017\176\020\074\023\174\030" +
    "\066\031\075\032\102\033\071\034\072\035\101\036\070" +
    "\037\077\001\001\000\002\001\001\000\022\003\014\004" +
    "\170\005\012\006\171\010\026\011\030\020\025\026\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\003" +
    "\063\005\012\010\026\011\030\020\025\026\013\001\001" +
    "\000\002\001\001\000\020\003\014\005\012\006\062\010" +
    "\026\011\030\020\025\026\013\001\001\000\006\012\035" +
    "\021\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\043\001\001\000\004\014\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\024\047\025\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\024\054\025\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\003\063\005\012\010" +
    "\026\011\030\020\025\026\013\001\001\000\002\001\001" +
    "\000\026\017\100\020\074\030\066\031\075\032\102\033" +
    "\071\034\072\035\101\036\070\037\077\001\001\000\012" +
    "\020\074\035\163\036\070\037\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\017" +
    "\107\020\074\030\066\031\075\032\102\033\071\034\072" +
    "\035\101\036\070\037\077\001\001\000\022\020\074\031" +
    "\106\032\102\033\071\034\072\035\101\036\070\037\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\017\116\020\074\030\066" +
    "\031\075\032\102\033\071\034\072\035\101\036\070\037" +
    "\077\001\001\000\024\020\074\030\113\031\075\032\102" +
    "\033\071\034\072\035\101\036\070\037\077\001\001\000" +
    "\002\001\001\000\022\020\074\031\115\032\102\033\071" +
    "\034\072\035\101\036\070\037\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\017\120\020\074\030\066" +
    "\031\075\032\102\033\071\034\072\035\101\036\070\037" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\020\074\035\125\036\070\037\077\001\001\000\012\020" +
    "\074\035\124\036\070\037\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\020\074\033" +
    "\142\034\072\035\101\036\070\037\077\001\001\000\014" +
    "\020\074\034\141\035\101\036\070\037\077\001\001\000" +
    "\016\020\074\033\140\034\072\035\101\036\070\037\077" +
    "\001\001\000\014\020\074\034\137\035\101\036\070\037" +
    "\077\001\001\000\016\020\074\033\134\034\072\035\101" +
    "\036\070\037\077\001\001\000\002\001\001\000\016\020" +
    "\074\033\136\034\072\035\101\036\070\037\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\020\074\033\144" +
    "\034\072\035\101\036\070\037\077\001\001\000\002\001" +
    "\001\000\016\020\074\033\146\034\072\035\101\036\070" +
    "\037\077\001\001\000\002\001\001\000\026\017\156\020" +
    "\074\030\066\031\075\032\102\033\071\034\072\035\101" +
    "\036\070\037\077\001\001\000\030\016\152\017\151\020" +
    "\074\030\066\031\075\032\102\033\071\034\072\035\101" +
    "\036\070\037\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\017\155\020\074\030\066\031\075\032\102" +
    "\033\071\034\072\035\101\036\070\037\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\017\161\020\074\030\066\031\075\032\102\033\071\034" +
    "\072\035\101\036\070\037\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\017\167\020\074" +
    "\030\066\031\075\032\102\033\071\034\072\035\101\036" +
    "\070\037\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\063\005\012\010\026\011\030\020\025\026" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\013\201\017\176\020\074\030\066\031\075" +
    "\032\102\033\071\034\072\035\101\036\070\037\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\003\204" +
    "\005\012\010\205\011\030\020\025\026\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\005\012\010\210" +
    "\011\207\020\025\026\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\216\027\220" +
    "\001\001\000\004\014\214\001\001\000\004\005\215\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\222\001\001\000\002\001" +
    "\001\000\004\027\230\001\001\000\002\001\001\000\004" +
    "\014\226\001\001\000\004\005\227\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\017\232\020\074\030\066" +
    "\031\075\032\102\033\071\034\072\035\101\036\070\037" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\235\005\012\010\026\011\030\020\025\026\013\001" +
    "\001\000\002\001\001\000\030\016\237\017\151\020\074" +
    "\030\066\031\075\032\102\033\071\034\072\035\101\036" +
    "\070\037\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\245\001\001\000\002\001\001\000\004\005\250" +
    "\001\001\000\006\015\251\027\220\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\253\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\017\256\020\074\030" +
    "\066\031\075\032\102\033\071\034\072\035\101\036\070" +
    "\037\077\001\001\000\002\001\001\000\026\017\260\020" +
    "\074\030\066\031\075\032\102\033\071\034\072\035\101" +
    "\036\070\037\077\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$BaseParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$BaseParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$BaseParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$BaseParser$actions {
  private final BaseParser parser;

  /** Constructor */
  CUP$BaseParser$actions(BaseParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$BaseParser$do_action(
    int                        CUP$BaseParser$act_num,
    java_cup.runtime.lr_parser CUP$BaseParser$parser,
    java.util.Stack            CUP$BaseParser$stack,
    int                        CUP$BaseParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$BaseParser$result;

      /* select the action based on the action number */
      switch (CUP$BaseParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // variable ::= IDENT L_SQUARE expression COMMA expression R_SQUARE 
            {
              Expn RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-5)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-5)).right;
		String arr = (String)((java_cup.runtime.Symbol) CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-5)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-3)).right;
		Expn i1 = (Expn)((java_cup.runtime.Symbol) CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-3)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-1)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-1)).right;
		Expn i2 = (Expn)((java_cup.runtime.Symbol) CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-1)).value;
		 RESULT = new SubsExpn(arr, i1, i2); 
              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("variable",14, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-5)), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // variable ::= IDENT L_SQUARE expression R_SQUARE 
            {
              Expn RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-3)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-3)).right;
		String arr = (String)((java_cup.runtime.Symbol) CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-3)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-1)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-1)).right;
		Expn i1 = (Expn)((java_cup.runtime.Symbol) CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-1)).value;
		 RESULT = new SubsExpn(arr, i1); 
              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("variable",14, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-3)), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // variable ::= IDENT 
            {
              Expn RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$BaseParser$stack.peek()).value;
		 RESULT = new IdentExpn(i); 
              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("variable",14, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // constant ::= FALSE 
            {
              Expn RESULT =null;
		 RESULT = new BoolConstExpn(false); 
              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("constant",29, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // constant ::= TRUE 
            {
              Expn RESULT =null;
		 RESULT = new BoolConstExpn(true); 
              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("constant",29, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // constant ::= INTCONST 
            {
              Expn RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$BaseParser$stack.peek()).value;
		 RESULT = new IntConstExpn(i); 
              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("constant",29, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // primary ::= L_PAREN expression QUESTION expression COLON expression R_PAREN 
            {
              Expn RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-5)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-5)).right;
		Expn q = (Expn)((java_cup.runtime.Symbol) CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-3)).right;
		Expn t = (Expn)((java_cup.runtime.Symbol) CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-1)).right;
		Expn f = (Expn)((java_cup.runtime.Symbol) CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-1)).value;
		 RESULT = new ConditionalExpn(q, t, f); 
              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("primary",28, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-6)), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // primary ::= L_PAREN expression R_PAREN 
            {
              Expn RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-1)).right;
		Expn e = (Expn)((java_cup.runtime.Symbol) CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-1)).value;
		 RESULT = e; 
              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("primary",28, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-2)), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // primary ::= IDENT L_PAREN arguments R_PAREN 
            {
              Expn RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-1)).right;
		ASTList<Expn> a = (ASTList<Expn>)((java_cup.runtime.Symbol) CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-1)).value;
		 RESULT = new FunctionCallExpn(i, a); 
              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("primary",28, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-3)), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // primary ::= variable 
            {
              Expn RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()).right;
		Expn v = (Expn)((java_cup.runtime.Symbol) CUP$BaseParser$stack.peek()).value;
		 RESULT = v; 
              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("primary",28, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // primary ::= constant 
            {
              Expn RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()).right;
		Expn c = (Expn)((java_cup.runtime.Symbol) CUP$BaseParser$stack.peek()).value;
		 RESULT = c; 
              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("primary",28, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // factor ::= MINUS factor 
            {
              Expn RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()).right;
		Expn f = (Expn)((java_cup.runtime.Symbol) CUP$BaseParser$stack.peek()).value;
		 RESULT = new UnaryMinusExpn(f); 
              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("factor",27, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-1)), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // factor ::= primary 
            {
              Expn RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()).right;
		Expn p = (Expn)((java_cup.runtime.Symbol) CUP$BaseParser$stack.peek()).value;
		 RESULT = p; 
              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("factor",27, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // term ::= term DIVIDE factor 
            {
              Expn RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-2)).right;
		Expn t = (Expn)((java_cup.runtime.Symbol) CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()).right;
		Expn f = (Expn)((java_cup.runtime.Symbol) CUP$BaseParser$stack.peek()).value;
		 RESULT = new ArithExpn(ArithExpn.OP_DIVIDE, t, f); 
              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("term",26, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-2)), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // term ::= term TIMES factor 
            {
              Expn RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-2)).right;
		Expn t = (Expn)((java_cup.runtime.Symbol) CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()).right;
		Expn f = (Expn)((java_cup.runtime.Symbol) CUP$BaseParser$stack.peek()).value;
		 RESULT = new ArithExpn(ArithExpn.OP_TIMES, t, f); 
              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("term",26, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-2)), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // term ::= factor 
            {
              Expn RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()).right;
		Expn f = (Expn)((java_cup.runtime.Symbol) CUP$BaseParser$stack.peek()).value;
		 RESULT = f; 
              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("term",26, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // arithExpn ::= arithExpn MINUS term 
            {
              Expn RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-2)).right;
		Expn e = (Expn)((java_cup.runtime.Symbol) CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()).right;
		Expn t = (Expn)((java_cup.runtime.Symbol) CUP$BaseParser$stack.peek()).value;
		 RESULT = new ArithExpn(ArithExpn.OP_MINUS, e, t); 
              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("arithExpn",25, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-2)), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // arithExpn ::= arithExpn PLUS term 
            {
              Expn RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-2)).right;
		Expn e = (Expn)((java_cup.runtime.Symbol) CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()).right;
		Expn t = (Expn)((java_cup.runtime.Symbol) CUP$BaseParser$stack.peek()).value;
		 RESULT = new ArithExpn(ArithExpn.OP_PLUS, e, t); 
              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("arithExpn",25, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-2)), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // arithExpn ::= term 
            {
              Expn RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()).right;
		Expn t = (Expn)((java_cup.runtime.Symbol) CUP$BaseParser$stack.peek()).value;
		 RESULT = t; 
              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("arithExpn",25, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // compareExpn ::= arithExpn GREATER EQUAL arithExpn 
            {
              Expn RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-3)).right;
		Expn e1 = (Expn)((java_cup.runtime.Symbol) CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()).right;
		Expn e2 = (Expn)((java_cup.runtime.Symbol) CUP$BaseParser$stack.peek()).value;
		 RESULT = new CompareExpn(CompareExpn.OP_GREATER_EQUAL, e1, e2); 
              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("compareExpn",24, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-3)), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // compareExpn ::= arithExpn GREATER arithExpn 
            {
              Expn RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-2)).right;
		Expn e1 = (Expn)((java_cup.runtime.Symbol) CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()).right;
		Expn e2 = (Expn)((java_cup.runtime.Symbol) CUP$BaseParser$stack.peek()).value;
		 RESULT = new CompareExpn(CompareExpn.OP_GREATER, e1, e2); 
              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("compareExpn",24, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-2)), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // compareExpn ::= arithExpn LESS EQUAL arithExpn 
            {
              Expn RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-3)).right;
		Expn e1 = (Expn)((java_cup.runtime.Symbol) CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()).right;
		Expn e2 = (Expn)((java_cup.runtime.Symbol) CUP$BaseParser$stack.peek()).value;
		 RESULT = new CompareExpn(CompareExpn.OP_LESS_EQUAL, e1, e2); 
              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("compareExpn",24, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-3)), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // compareExpn ::= arithExpn LESS arithExpn 
            {
              Expn RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-2)).right;
		Expn e1 = (Expn)((java_cup.runtime.Symbol) CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()).right;
		Expn e2 = (Expn)((java_cup.runtime.Symbol) CUP$BaseParser$stack.peek()).value;
		 RESULT = new CompareExpn(CompareExpn.OP_LESS, e1, e2); 
              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("compareExpn",24, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-2)), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // compareExpn ::= arithExpn NOT EQUAL arithExpn 
            {
              Expn RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-3)).right;
		Expn e1 = (Expn)((java_cup.runtime.Symbol) CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()).right;
		Expn e2 = (Expn)((java_cup.runtime.Symbol) CUP$BaseParser$stack.peek()).value;
		 RESULT = new EqualsExpn(EqualsExpn.OP_NOT_EQUAL, e1, e2); 
              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("compareExpn",24, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-3)), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // compareExpn ::= arithExpn EQUAL arithExpn 
            {
              Expn RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-2)).right;
		Expn e1 = (Expn)((java_cup.runtime.Symbol) CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()).right;
		Expn e2 = (Expn)((java_cup.runtime.Symbol) CUP$BaseParser$stack.peek()).value;
		 RESULT = new EqualsExpn(EqualsExpn.OP_EQUAL, e1, e2); 
              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("compareExpn",24, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-2)), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // compareExpn ::= arithExpn 
            {
              Expn RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()).right;
		Expn e = (Expn)((java_cup.runtime.Symbol) CUP$BaseParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("compareExpn",24, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // negation ::= NOT negation 
            {
              Expn RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()).right;
		Expn e = (Expn)((java_cup.runtime.Symbol) CUP$BaseParser$stack.peek()).value;
		 RESULT = new NotExpn(e); 
              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("negation",23, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-1)), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // negation ::= compareExpn 
            {
              Expn RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()).right;
		Expn e = (Expn)((java_cup.runtime.Symbol) CUP$BaseParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("negation",23, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // conjunction ::= conjunction AND negation 
            {
              Expn RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-2)).right;
		Expn e = (Expn)((java_cup.runtime.Symbol) CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()).right;
		Expn n = (Expn)((java_cup.runtime.Symbol) CUP$BaseParser$stack.peek()).value;
		 RESULT = new BoolExpn(BoolExpn.OP_AND, e, n); 
              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("conjunction",22, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-2)), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // conjunction ::= negation 
            {
              Expn RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()).right;
		Expn e = (Expn)((java_cup.runtime.Symbol) CUP$BaseParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("conjunction",22, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expression ::= expression OR conjunction 
            {
              Expn RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-2)).right;
		Expn e = (Expn)((java_cup.runtime.Symbol) CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()).right;
		Expn c = (Expn)((java_cup.runtime.Symbol) CUP$BaseParser$stack.peek()).value;
		 RESULT = new BoolExpn(BoolExpn.OP_OR, e, c); 
              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-2)), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expression ::= conjunction 
            {
              Expn RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()).right;
		Expn c = (Expn)((java_cup.runtime.Symbol) CUP$BaseParser$stack.peek()).value;
		 RESULT = c; 
              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // parameter ::= IDENT COLON type 
            {
              Object RESULT =null;

              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("parameter",21, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-2)), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // parameters ::= parameters COMMA parameter 
            {
              Object RESULT =null;

              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("parameters",11, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-2)), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // parameters ::= parameter 
            {
              Object RESULT =null;

              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("parameters",11, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // arguments ::= arguments COMMA expression 
            {
              ASTList<Expn> RESULT =null;

              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("arguments",12, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-2)), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // arguments ::= expression 
            {
              ASTList<Expn> RESULT =null;

              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("arguments",12, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // inputs ::= inputs COMMA variable 
            {
              Object RESULT =null;

              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("inputs",16, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-2)), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // inputs ::= variable 
            {
              Object RESULT =null;

              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("inputs",16, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // output ::= NEWLINE 
            {
              Object RESULT =null;

              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("output",9, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // output ::= TEXTCONST 
            {
              Object RESULT =null;

              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("output",9, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // output ::= expression 
            {
              Object RESULT =null;

              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("output",9, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // outputs ::= outputs COMMA output 
            {
              Object RESULT =null;

              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("outputs",17, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-2)), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // outputs ::= output 
            {
              Object RESULT =null;

              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("outputs",17, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // type ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // type ::= INTEGER 
            {
              Object RESULT =null;

              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // generalBound ::= MINUS INTCONST 
            {
              Object RESULT =null;

              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("generalBound",19, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-1)), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // generalBound ::= INTCONST 
            {
              Object RESULT =null;

              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("generalBound",19, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // bound ::= generalBound DOT DOT generalBound 
            {
              Object RESULT =null;

              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("bound",18, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-3)), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // bound ::= INTCONST 
            {
              Object RESULT =null;

              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("bound",18, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // variablename ::= IDENT L_SQUARE bound COMMA bound R_SQUARE 
            {
              Object RESULT =null;

              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("variablename",15, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-5)), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // variablename ::= IDENT L_SQUARE bound R_SQUARE 
            {
              Object RESULT =null;

              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("variablename",15, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-3)), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // variablename ::= IDENT 
            {
              Object RESULT =null;

              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("variablename",15, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // variablenames ::= variablenames COMMA variablename 
            {
              Object RESULT =null;

              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("variablenames",8, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-2)), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // variablenames ::= variablename 
            {
              Object RESULT =null;

              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("variablenames",8, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaration ::= PROCEDURE IDENT L_PAREN parameters R_PAREN scope 
            {
              Object RESULT =null;

              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-5)), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declaration ::= PROCEDURE IDENT scope 
            {
              Object RESULT =null;

              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-2)), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaration ::= FUNCTION IDENT L_PAREN parameters R_PAREN COLON type scope 
            {
              Object RESULT =null;

              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-7)), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaration ::= FUNCTION IDENT COLON type scope 
            {
              Object RESULT =null;

              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-4)), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaration ::= VAR variablenames COLON type 
            {
              Object RESULT =null;

              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-3)), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // procedureCall ::= IDENT L_PAREN arguments R_PAREN 
            {
              Object RESULT =null;

              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("procedureCall",20, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-3)), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // procedureCall ::= IDENT 
            {
              Object RESULT =null;

              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("procedureCall",20, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // unmatchedStatement ::= IF expression THEN matchedStatement ELSE unmatchedStatement 
            {
              Object RESULT =null;

              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("unmatchedStatement",7, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-5)), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // unmatchedStatement ::= IF expression THEN statement 
            {
              Object RESULT =null;

              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("unmatchedStatement",7, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-3)), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // matchedStatement ::= scope 
            {
              Object RESULT =null;

              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("matchedStatement",6, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // matchedStatement ::= procedureCall 
            {
              Object RESULT =null;

              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("matchedStatement",6, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // matchedStatement ::= READ inputs 
            {
              Object RESULT =null;

              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("matchedStatement",6, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-1)), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // matchedStatement ::= WRITE outputs 
            {
              Object RESULT =null;

              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("matchedStatement",6, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-1)), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // matchedStatement ::= RETURN 
            {
              Object RESULT =null;

              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("matchedStatement",6, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // matchedStatement ::= RETURN WITH expression 
            {
              Object RESULT =null;

              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("matchedStatement",6, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-2)), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // matchedStatement ::= EXIT INTCONST WHEN expression 
            {
              Object RESULT =null;

              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("matchedStatement",6, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-3)), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // matchedStatement ::= EXIT WHEN expression 
            {
              Object RESULT =null;

              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("matchedStatement",6, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-2)), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // matchedStatement ::= EXIT INTCONST 
            {
              Object RESULT =null;

              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("matchedStatement",6, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-1)), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // matchedStatement ::= EXIT 
            {
              Object RESULT =null;

              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("matchedStatement",6, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // matchedStatement ::= REPEAT statements UNTIL expression 
            {
              Object RESULT =null;

              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("matchedStatement",6, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-3)), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // matchedStatement ::= WHILE expression DO statement 
            {
              Object RESULT =null;

              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("matchedStatement",6, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-3)), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // matchedStatement ::= IF expression THEN matchedStatement ELSE matchedStatement 
            {
              Object RESULT =null;

              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("matchedStatement",6, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-5)), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // matchedStatement ::= variable COLON EQUAL expression 
            {
              Object RESULT =null;

              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("matchedStatement",6, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-3)), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= unmatchedStatement 
            {
              Object RESULT =null;

              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= matchedStatement 
            {
              Object RESULT =null;

              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declarations ::= declarations declaration 
            {
              Object RESULT =null;

              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("declarations",5, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-1)), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declarations ::= declaration 
            {
              Object RESULT =null;

              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("declarations",5, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statements ::= statements statement 
            {
              Object RESULT =null;

              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("statements",4, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-1)), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statements ::= statement 
            {
              Object RESULT =null;

              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("statements",4, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // scope ::= L_CURLEY R_CURLEY 
            {
              Object RESULT =null;

              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("scope",3, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-1)), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // scope ::= L_CURLEY statements R_CURLEY 
            {
              Object RESULT =null;

              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("scope",3, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-2)), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // scope ::= L_CURLEY declarations statements R_CURLEY 
            {
              Object RESULT =null;

              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("scope",3, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-3)), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= scope 
            {
              Object RESULT =null;

              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          return CUP$BaseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-1)).value;
		RESULT = start_val;
              CUP$BaseParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$BaseParser$stack.elementAt(CUP$BaseParser$top-1)), ((java_cup.runtime.Symbol)CUP$BaseParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$BaseParser$parser.done_parsing();
          return CUP$BaseParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

