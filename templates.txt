1. Storage

    a. variables in the main program

    Variables in the main program will be allocated as an activation record at the beginning of the stack. This way, nested scopes can easily access these "global" variables by simply using the display at 0. These variables will the simply be put in order as they are declared. This way accessing variables need only be counting the total amount of space of variables beforehand. In addition, these variables must be assigned their default values. We will use DUPN to initialize these so we have fewer instructions than a series of PUSH 0 commands.

    Example code:

    {
        var x, y[3] : integer   % 1.a.1

        function f : integer {
            return with y[2] % a.2
        }
    }

    Generated code (specifically for the variable portion):

    PUSH 0  % 1.a.1
    PUSH 4  % 1.a.1
    DUPN    % 1.a.1

    These can easily be accessed by any scope using commands similar to (the last argument will vary):

    ADDR 0 3    % 1.a.2

    b. variables in procedures and functions

    Variables in routines will be handled similarly to the main program. That is, when an activation record starts, variable values will simply be pushed onto the stack (see 1.a for details). Accessing these variables can be performed similar to those in the main program, however the "lexical level" argument must be specified at compile time based on the depth of the function declaration. When leaving the routine, these variables will be popped off.

    Example code:
    
    {
        var x, y[3] : integer

        function f : integer {
            var z : integer
            return with z % 1.b.1
        }
    }

    Generated code for accessing:

    ADDR 1 0    % 1.b.1
    
    c. variables in minor scopes

    Minor scopes will be handled just the same as the routine scopes, with the added understanding that an explicit activation record will not be created. The variables of the minor scope will just be pushed onto the stack atop the variables of the major scope. This means that minor scopes when accessed will need to account for the total variables of all previous scopes. This can be done during the generation phase as incrementing both a function size and a scope size whenever a declaration is reached, and then decrementing the function size by the scope size when leaving a scope. This allows us to place variables in overlapping locations when their execution times do not overlap.

    Example code:

    {
        var x, y[3] : integer

        {
            var z : integer
            z := z  % 1.c.1
        }

        {
            var w : integer
            w := w  % 1.c.2
        }
    }

    Generated code for access:

    ADDR 0 4    % 1.c.1

    ADDR 0 4    % 1.c.2

    These must be offset to account for the total size of the scope the main lexical scope, but they do not need to be offset relative to each other since these variables are mutually exclusive when it comes to accessibility.

    d. integer and boolean constants

    These values will not be "stored" anywhere but the program code. These constants will be embedded in the program code and will simply be pushed when needed for an expression.

    e. text constants

    Just as with the other constants, text constants will only be embedded in the program code. As text constants can only be used in the context of "write" expressions, these can be interleaved with the "write" command to reduce memory requirements.

    Example code:

    {
        write "ABC" % 1.e.1
    }

    Generated code for constant (The characters will be named as the text representation rather than their character value):

    PUSH "A"    % 1.e.1
    PRINTC      % 1.e.1
    PUSH "B"    % 1.e.1
    PRINTC      % 1.e.1
    PUSH "C"    % 1.e.1
    PRINTC      % 1.e.1

2. Expressions

    a. values of constants

    As specified in 1.d and 1.e, integer and boolean values will not truly be "accessed". When an expression requires these constants, it will simply push them directly onto the stack using the PUSH command since it takes an argument anyway.

    b. values of scalar variables

    As specified in 1.a, 1.b, and 1.c, to access the value of scalar variables we first must load the address of the variable with ADDR (for which the arguments are computed at compile time), and then we use the LOAD command to collect its value.

    Example code:

    {
        var x, y[3] : integer
        x := x  % 2.b.1
    }

    Generated code:

    ADDR 0 0    % 2.b.1
    LOAD        % 2.b.1

    At the end of this, the value to be stored in x will be at the top of stack, which we can then use for whatever next steps we need (in this example, simply assigning back to x).

    c. array elements

    The beginning of accessing array elements is the same: we first load the address of the variable with ADDR. Now we must split into two cases: 1d vs 2d arrays.

        i. 1-d arrays

        Consider array A[x] where x is the expression. In this case, we must first evaluate x. Then we subtract the lower bound for dimension 1 of x, and finally we add this offset to the address acquired from ADDR, where we can use LOAD to collect the value.

        Example code:

        {
            var y[3..10] : integer
            write y[4]  % 2.c.i.1
        }

        Generated code (including initial address access):

        ADDR 0 0    % 2.c.i.1
        PUSH 4      % 2.c.i.1 - this is simply evaluating the expression "4"
        PUSH 3      % 2.c.i.1 - value of lower bound for dimension 1
        SUB         % 2.c.i.1 - subtracts lower bound from expression value
        LOAD        % 2.c.i.1

        ii. 2-d arrays

        Consider array A[x, y] where x, y are expressions. In this case, we first evaluate x. We then subtract the lower bound for dimension 1, and also multiply by the stride of dimension 2. The reasoning for these manipulations is explained in the class slides, so I will not explain again. Continuing, we then evaluate expression y, and subtract the lower bound for dimension 2. Finally, we add these together (since they will be the top most values on the stack) as well as the array address and use LOAD to collect the value.

        Example code:

        {
            var y[3..10, 7..12] : integer
            write y[4, 11]   % 2.c.i.2
        }

        Generated code (including initial address access):

        ADDR 0 0    % 2.c.i.2
        PUSH 4      % 2.c.i.2 - evaluating expression "4"
        PUSH 3      % 2.c.i.2 - value of lower bound for dimension 1
        SUB         % 2.c.i.2
        PUSH 6      % 2.c.i.2 - stride of dimension 2
        MUL         % 2.c.i.2
        PUSH 11     % 2.c.i.2 - evaluating expression "11"
        PUSH 7      % 2.c.i.2 - value of lower bound for dimension 2
        SUB         % 2.c.i.2
        ADD         % 2.c.i.2 - add values for both dimensions
        ADD         % 2.c.i.2 - add offset to array start address
        LOAD        % 2.c.i.2
    
    As a slight optimization, for arrays with a lower bound of 0, these templates will be modified to exclude the operations of PUSHing the lower bound for the dimension and substracting, since these will simply yield the same value as the original expression.

    d. arithmetic operators

    These operations will be quite simple. Simply evaluate the expression of the left, then evaluate the expression on the right. Finally, call the appropriate operation.

    Example code:

    {
        var x, y : integer
        x := 4 + 9  % 2.d.1
    }

    Generated code:
    
    PUSH 4  % 2.d.1 - evaluate left
    PUSH 9  % 2.d.1 - evaluate right
    ADD     % 2.d.1

    The last line will be the only difference for different arithmetic operators.

    e. comparison operators

    These operators each have somewhat unique behaviour. We will rely on the explanations from 2.f.

        i. The "less than" operator and the "equal" operator

        These will perform like arithmetic operators: evaluate left, evaluate right, call operation.

        Example code:

        {
            if 4 < 5 then { % 2.e.i.1

            }
        }

        Generated code:

        PUSH 4  % 2.e.i.1
        PUSH 5  % 2.e.i.1
        LT      % 2.e.i.1

        ii. The "greater than" operator

        This operator will be similar to the previous: evaluate left, evaluate right, swap the values, call LT operation. We can do this, since if b < a, that means a > b. So simply swapping the top two values (the values of the expression) will produce the desired result.

        Example code:

        {
            if 4 > 5 then { % 2.e.ii.1

            }
        }

        Generated code:

        PUSH 4  % 2.e.ii.1
        PUSH 5  % 2.e.ii.1
        SWAP    % 2.e.ii.1
        LT      % 2.e.ii.1

        As a note, the reason we do not simply evaluate the right then the left is because if a function on the right yields some side effect to variables accessible to the left, the computation will be incorrect.

        iii. The "greater than or equal" operator, the "not equal" operator and the "less than or equal" operator

        These can simply by the boolean "not" of "less than", "equal", and "greater than" operators respectively. As described in 2.f, performing a boolean "not" is simply taking 1 - <your value> so, using the same trick, we first push a 1 onto the stack, then proceed as normal with the associated operation, and subtract at the end to perform the boolean "not".

        Example code:
        
        {
            if 4 >= 5 then { % 2.e.iii.1

            }
        }

        Generated code:

        PUSH 1  % 2.e.iii.1 - push 1 for the boolean "not" later
        PUSH 4  % 2.e.iii.1
        PUSH 5  % 2.e.iii.1
        LT      % 2.e.iii.1
        SUB     % 2.e.iii.1 - subtract for the boolean "not"

        The same can be done for "greater than" and "equal" operations to get the associated result.
    
    f. boolean operators

    The "or" operator can be performed just like the arithmetic operators: evaluate left, evaluate right, call OR command. The "and" operator is slightly more tricky (and "not" is trickier still). First we must note that boolean values are stored as 1 for true, and 0 for false. Using this fact, we can perform an "and" using addition. If both sides are true, that means that they are both 1, so adding them together will yield 2 (in any other case the sum is less than 2). We can then simply check if the sum we get equals 2, and if it does, the expression evaluates to true. Otherwise, the sum must have been less than 2, and therefore the "and" fails (as expected).

    Example code:

    {
        if true and false then {    % 2.f.1

        }
    }

    Generated code:

    PUSH 1  % 2.f.1 - evaluate left
    PUSH 0  % 2.f.1 - evaluate right
    ADD     % 2.f.1
    PUSH 2  % 2.f.1 - the 2 we will compare against
    EQ      % 2.f.1

    The "not" operation will also take advantage of the representation of the boolean values. Since true is 1, and false is 0, we can do 1 - <value> to get the boolean "not", since 1 - true = 1 - 1 = 0 = false and 1 - false = 1 - 0 = 1 = true (the expected results for "not"). To do this in our code generation, we first push a 1 (so we have something to subtract from). Then we evaluate the expression to be "not"ed and finally we subtract the two.

    Example code:

    {
        if not false then {  % 2.f.2

        }
    }

    Generated code:

    PUSH 1  % 2.f.2 - the 1 to subtract from later
    PUSH 0  % 2.f.2 - evaluate expression
    SUB     % 2.f.2

    g. conditional expressions

    Conditional expressions will use a branch command. The idea is to first evaluate the condition, and if false, jump to the part of the code that evaluates the "false" expression of the conditional. If the condition is true, it should evaluate the "true" expression. To do this, we use two branches. The first will decide whether to evaluate the "true" or "false" expressions. The second will "skip" over the false section so we do not evaluate both expressions. The difficult part is that, since we do not know how big the "true" expression will be in terms of instructions, we will have to go back (during code generation) after constructing the "true" expression to assign the correct address.

    Example code:

    {
        write (true ? 7 : 9)    % 2.g.1
    }

    Generated code:

    PUSH <address of false expression>      % 2.g.1 - for BF later
    PUSH 1                                  % 2.g.1 - evaluate condition
    BF                                      % 2.g.1
    PUSH 7                                  % 2.g.1 - evaluate true expression
    PUSH <address after false expression>   % 2.g.1 - skip over false expression
    BR                                      % 2.g.1
    PUSH 9                                  % 2.g.1 - evaluate false expression, this is the address of the false expression
    % This would be the address after false expression

3. functions and procedures

    a. the activation record

    Our activation record will be a combination of the block mark and the local variables (in that order). In addition, we add the slight simplification that the display entries will point to the start of the local variables. This allows us to easily distinguish between accessing variables, and accessing the block mark. Our block mark will contain the dynamic link, the return address, and the static link. Example code generation will be given in 3.b.

    b. procedure and function entrance code

    Both procedures and functions will essentially have the same entrance code. We will assume that calling a routine is handled. As will be described in 3.e/3.f, routine calls will create the activation record and store parameters before branching, so here we only need to handle the interior of the routine. Inside the routine, we must store the correct static link, update the display table and then PUSH all variables. To get the correct static link, we simply get the address of the display for the lexical level above the routine (lecture slides explain this in more detail). We then replace the 0 we PUSHed at the call site with this static link we collected. In order to replace this we will need to calculate the correct offset from the stack pointer at compile time to subtract by which will be the number of parameters plus 1. To update the display, we simply use PUSHMT to get the current stack pointer, subtract the size of the parameters, and use SETD to set the pointer of the routine's lexical level to this stack pointer. Finally, we need to allocate space for the routine's local variables. We can do this by first PUSHing a 0, which will be the default value for all variables. We then PUSH the number of addresses we need to fill, and then use DUPN. This will fill all our desired values in at once with few commands. As a note, when using DUPN, we must not include the parameter sizes in our count as those will be handled by the callsite. In addition, if the size of local variables is less than or equal to 3 (the number of instructions it takes to perform the DUPN), we can simply replace this with 3 PUSH 0 commands. This may be an optional optimization in the future.
    
    Example code:

    {
        procedure p(a : integer) {  % 3.b.1
            var x[5] : integer
        }
        p(7)
    }

    Generated code:

    PUSHMT      % 3.b.1
    PUSH 2      % 3.b.1 - size of parameters plus one
    SUB         % 3.b.1
    ADDR 0 0    % 3.b.1 - get static link (one lexical level up)
    STORE       % 3.b.1 - store the static link in its correct location
    PUSHMT      % 3.b.1
    PUSH 1      % 3.b.1 - size of parameters
    SUB         % 3.b.1
    SETD 1      % 3.b.1
    PUSH 0      % 3.b.1
    PUSH 6      % 3.b.1 - size of remaining local variables
    DUPN        % 3.b.1 - duplicate 0 to fill the local variables.

    c. procedure and function exit code

    For exit code, procedures and functions differ. Again, we will assume the call site is handled correctly. For the routine interior, We will consider procedures first (as they are simpler). First, when generating code for procedures, we will have the main code section, and the cleanup section. The main code will be generated from the statements of the procedure. The cleanup section will follow this, and will handle procedure exiting. So whenever a return statement is hit, we will simply push the address of the cleanup section and BR. Notice that if no return statement is hit, we will naturally move to the cleanup section (since it is after the main code).

    Example code:

    {
        procedure p {
            if true {
                return  % 3.c.1
            }
        }
        p
    }

    Generated code:

    PUSH <address of cleanup>   % 3.c.1
    BR                          % 3.c.1

    The cleanup section will simply be popping the correct number of variables off the stack, and using BR to return to the call site. To simplify code generation, we can use the display table to easily pop off the correct number of variables on the stack. For optimization, we can compute the correct number of variables to pop off and simply insert this as a constant. However for this template, we will use the first method.

    Example code:

    {
        procedure p {
            var x, y[10] : integer
            write 0
        }   % 3.c.2
        p
    }

    Generated code:

    PUSHMT      % 3.c.2
    ADDR 1 -1   % 3.c.2 - push the address of the static link, since we want to pop everything until before that.
    SUB         % 3.c.2 - this will get the number of variables on the stack from the static link to the top of the stack.
    POPN        % 3.c.2 - pop all those variables
    BR          % 3.c.2 - the return address will be next, so just branch to get back there.

    Functions have a similar idea, but we must "juggle" the return variable. Again, the code will be split into the main code and the cleanup section. On a return statement, instead of simply branching to the cleanup section, we must first evaluate the return expression, and then PUSH the cleanup address and branch. Note that in our implementation, we require that functions terminate with a return statement (they cannot reach the end of code without returning). So the cleanup section is completely separated from the main code by a return statement.

    Example code:
    
    {
        function f : integer {
            return with 7   % 3.c.3
        }
    }

    Generated code:

    PUSH 7                      % 3.c.3 - evaluate return expression
    PUSH <address of cleanup>   % 3.c.3
    BR                          % 3.c.3

    For the cleanup section, we first replace the static link with the value of the expression so that we can clear the stack. Next we use the same strategy as for procedures to clear the stack (with the added restriction that we do not pop the static link location). In order to branch, we must first SWAP the return value with the return address, after which we can use the BR command.

    Example code:
    
    {
        function f : integer {
            return with 7
        }   % 3.c.4
    }

    Generated code:

    ADDR 1 -1   % 3.c.4 - get address of the static link
    SWAP        % 3.c.4 - swap the address with the return value
    STORE       % 3.c.4
    PUSHMT      % 3.c.4
    ADDR 1 0    % 3.c.4
    SUB         % 3.c.4
    POPN        % 3.c.4
    SWAP        % 3.c.4 - swap the return value and the return address
    BR          % 3.c.4 - return to the call site.
    
    d. parameter passing

    Parameter passing will simply occur after a routine call creates the activation record. To do parameter passing, we simply evaluate the parameter expressions in order. After this the parameters will simply be the top most values on the stack (which will correspond to the first few local variables). Example code for this will be in 3.e.

    e. function call and function value return

    Function calls must create the activation record, setup the parameters, and finally jump to the function. First the activation record holds 3 values: the dynamic link, the return address, and the static link. We can set these up quite easily. First the dynamic link can be acquired by simply using ADDR. The return address will be generated at compile time at the call site. The static link cannot actually be created here (that is handled inside the function), but in order to create a complete activation record, we must make a space for it, so we can simply PUSH 0. Next we must evaluate the parameters in order, as explained in 3.e. Finally, we PUSH the function address and use BR to jump there.

    Example code:

    {
        function f(a : integer, b : integer) : integer {
            return with 7
        }
        write f(4, 7)   % 3.e.1
    }

    Generated code:

    ADDR 1 0                    % 3.e.1
    PUSH <address after branch> % 3.e.1
    PUSH 0                      % 3.e.1 - make space for the static link
    PUSH 4                      % 3.e.1 - evaluate parameter 1
    PUSH 7                      % 3.e.1 - evaluate parameter 2
    PUSH <address of function>  % 3.e.1
    BR                          % 3.e.1

    When the function returns, the only remaining values on the stack (related to the function) are the dynamic link and the return value (in bottom to top order). When returning, we must first reset the display table. This will be described in more detail in 3.g, but in order for this to occur we must first SWAP to put the dynamic link at the top. Once the display management strategy is completed, the only remaining value on the stack will be the function return value, and we can treat this as an expression just as before.

    Example code:
    
    {
        function f(a : integer, b : integer) : integer {
            return with 7
        }
        write f(4, 7)   % 3.e.2
    }

    Generated code:

    SWAP    % 3.e.2
    % Perform display management strategy

    f. procedure call
    
    Procedure calls work just the same as function calls. The only distinction is after returning from the procedure. In this case, the only value of the stack will be the dynamic link. We will use this for the display management strategy, after which we can continue to other statements in the execution line.

    g. display management strategy

    To manage the display, we must first recognize that calling routines correctly manages display. This is because when calling a routine, we only modify the lexical level of that routine. This is correct, since all larger lexical levels will not be usable until they are reassigned (by another routine call), and smaller lexical levels will already be correct. In addition, the static links are correctly assigned as they are always assigned to the preceding lexical level. So we need only consider when returning from a routine.

    Our display management strategy has two steps. The initial step, uses the dynamic link from the activation record of a routine. It uses SETD to reset the current lexical level's display address. All steps after this are the second type. In these steps, we look at the static link at the current display, use that to SETD for the lexical level, and then perform this recursively. We terminate once we have assigned the lexical level of 0. An example will make this much more clear.

    Example code:

    {
        procedure p {
            procedure q {
                procedure r {

                }
                r   % 3.g.1
            }
            q
        }
        p
    }

    Generated code (after the branch to jump to r):

    SETD 2      % 3.g.1 - use dynamic link to set q's lexical level
    ADDR 2 -1   % 3.g.1 - get static link of q
    SETD 1      % 3.g.1 - set p's lexical level
    ADDR 1 -1   % 3.g.1 - get static link of p
    SETD 0      % 3.g.1 - set main's lexical level

4. statements

    a. assignment statement

    To perform an assignment, we will first need to access the left side, so we write the code to collect the address of the left side. Then we evaluate the expression on the right, and finally we perform a STORE to set the variable.

    Example code:

    {
        var x, y : integer

        y := 3  % 4.a.1
    }

    Generated code:

    ADDR 0 1    % 4.a.1 - collect address of variable
    PUSH 3      % 4.a.1 - evaluate right expression
    STORE       % 4.a.1

    b. if statements

    An if statement will first evaluate its condition, and then perform a BF to decide whether to skip over the "true" block. If the statement has an "else" block, the "true" block's code must also end in a BR to jump over the "else" block. Otherwise, we can simply omit this branch and the "true" block will simply fall down to the remainder of the code.

    Example code:

    {
        var x : integer
        if true then x := 3 else x := 5     % 4.b.1
    }

    Generated code:

    PUSH 1                          % 4.b.1 - evaluate condition
    PUSH <address of else block>    % 4.b.1
    BF                              % 4.b.1
    ADDR 0 0                        % 4.b.1 - true block statement
    PUSH 3                          % 4.b.1 - true block statement
    STORE                           % 4.b.1 - true block statement
    PUSH <address after else block> % 4.b.1
    BR                              % 4.b.1
    ADDR 0 0                        % 4.b.1 - false block statement, this point is address of else block
    PUSH 5                          % 4.b.1 - false block statement
    STORE                           % 4.b.1 - false block statement
    % This is address after else block
    
    c. while and repeat statements

    These statements have a very similar structure. First, we evaluate the condition. If this is a repeat loop, we take the NOT of this (since we want to leave the loop once the condition is true). Next, we use BF to skip to the end of the loop if the condition is incorrect. Finally, we generate the code for the body, followed by a BR to return us to the top of the statement code.

    Example code:

    {
        while true do {
            write 0                 % 4.c.1
        }
        repeat write 0 until true   % 4.c.2
    }

    Generated code:

    PUSH 1                          % 4.c.1 - evaluate condition, this is address of start of loop
    PUSH <address after loop>       % 4.c.1
    BF                              % 4.c.1
    PUSH 0                          % 4.c.1 - code for body
    PRINTI                          % 4.c.1 - code for body
    PUSH <address of start of loop> % 4.c.1
    BR                              % 4.c.1
    % This is address after loop

    To make it clear the distinction, these are separated for each loop, but in the actual code, these would be touching tip to tail.

    PUSH 1                          % 4.c.2 - to take the boolean not, this is address of start of loop
    PUSH 1                          % 4.c.2 - evaluate condition
    SUB                             % 4.c.2 - take the boolean not
    PUSH <address after loop>       % 4.c.2
    BF                              % 4.c.2
    PUSH 0                          % 4.c.2 - code for body
    PRINTI                          % 4.c.2 - code for body
    PUSH <address of start of loop> % 4.c.2
    BR                              % 4.c.2
    % This is address after loop

    d. exit statements

    First, we will begin with exit statements (with an optional number of loops) without the expression. These will simply be first popping the correct number of variables off the stack (using POPN), followed by a BR command to the address after the associated loop. The POPN only need occur if there are variables to be popped off since we entered the loop iteration. For an exit statement with a "when" expression, we must first evaluate the expression. Then we use a BF command that will skip to after the exit statement. This is since we only want to use the exit statement if the expresion is true. Next, we must use POPN just as before to pop the variables declared since the start of the iteration, and finally we use BR to go to the statement after the associated loop.

    Example code:

    {
        while true do {
            var x : integer
            while true do {
                var y, z : integer
                exit when true  % 4.d.1

                exit 2          % 4.d.2
            }
        }
    }

    Generated code:

    PUSH 1                          % 4.d.1 - condition
    PUSH <address after exit>       % 4.d.1
    BF                              % 4.d.1
    PUSH 2                          % 4.d.1 - the number of variables we need to pop off the stack: y, z
    POPN                            % 4.d.1
    PUSH <address after inner loop> % 4.d.1
    BR                              % 4.d.1
    % This is address after exit

    We split these to distinguish the two statements, but in the actual code, these would be touching tip to tail. Note that the POPN in the second statement will not be reached if the first statement evaluates to true, so we will never "free" the memory twice.

    PUSH 3                          % 4.d.2 - the number of variables to pop off: x, y, z
    POPN                            % 4.d.2
    PUSH <address after outer loop> % 4.d.2
    BR                              % 4.d.2

    e. return statements

    Return statements were described in 2.c (since they are heavily linked with the exit code of a function). To summarise, for procedures, the return statement will simply branch to the cleanup code of the procedure. For functions, the return statement first evaluates the expression and then branches to the cleanup code of the function.

    f. read and write statements

    Write statements are simple. First, we can treat writing multiple things as several completely separate write statements. That is, "write 0, 1, 2" is the same as "write 0 write 1 write 2". Next, we need to distinguish between writing integers and writing text constants. For writing integers, we need only evaluate the expression and then call PRINTI. For writing text constants, we use the strategy described in 1.e. We push and write each character individually. This means at runtime we need only 1 spot on the stack as opposed to enough places to store the entire string.

    Example code:

    {
        write 7, "hello"    % 4.f.1
    }

    Generated code:
    PUSH 7      % 4.f.1 - evaluate expression
    PRINTI      % 4.f.1
    PUSH "h"    % 4.f.1
    PRINTC      % 4.f.1
    PUSH "e"    % 4.f.1
    PRINTC      % 4.f.1
    PUSH "l"    % 4.f.1
    PRINTC      % 4.f.1
    PUSH "l"    % 4.f.1
    PRINTC      % 4.f.1
    PUSH "o"    % 4.f.1
    PRINTC      % 4.f.1

    For read statements, we perform something similar. First, we get the address of the variable we want to store into. Then we call READI. Note that the machine also has a READC command, but as our language does not support text operations other than writing, it goes unused.

    Example code:

    {
        var x : integer
        read x  % 4.f.2
    }

    Generated code:

    ADDR 0 0    % 4.f.2 - address of x
    READI       % 4.f.2

    g. minor scopes

    Minor scopes simply initialize their local variables just like routines. Upon exiting a minor scope however, we must also pop all local variables off the stack. Other than these two facts, minor scopes change nothing else about execution.

    Example code:

    {
        {   % 4.g.1
            var x, y: integer
            write 0
        }   % 4.g.2
    }

    Generated code:

    PUSH 0  % 4.g.1
    PUSH 2  % 4.g.1
    DUPN    % 4.g.1

    PUSH 2  % 4.g.2
    POPN    % 4.g.2

5. everything else

    a. main program initialization and termination

    On initialization, we must first assign the main scope to the display. We can do this using PUSHMT followed by SETD 0. Next, we must initialize the main scope's variables. We can do this just the same as routines or minor scopes: using DUPN. For termination, we perform some small cleanup tasks, such as using POPN to remove all remaining variables, and finally calling the HALT command. While removing remaining variables may not be necessary, it does protect us from strange issues in the machine if there is reuse.

    b. extra scope handling

    Most of the scope handling will be done at compile time. For example, managing where variables will be is done during semantic analysis. These offsets are then just used to address these variables when performing code generation.

    c. extra info

    Routine code will come in a "breadth first" ordering after the main program code. There is no particular reason for the ordering, it's just one of the simplest orderings.
