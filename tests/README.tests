passing:
    test_array_decl.488             : Example array declarations
    test_exit_int_when_expr.488     : Exit statement with a number leaving a certain number of loops with an expression
    test_exit_loop.488              : A simple exit statement
    test_exit_loop_level.488        : Exit statements with just a number
    test_exit_when_expr.488         : Exit statements with an expression
    test_expr_arith.488             : Some arithmetic expressions
    test_expr_compare_equal.488     : Comparisons using equals and not equals
    test_expr_compare_ops.488       : Comparisons using less than / greater than, etc
    test_expr_cond_expr.488         : Conditional expressions with both integer and boolean results
    test_expr_minus.488             : Negating integers
    test_func_decl_and_expr.488     : Multiple function declarations and uses of those functions
    test_proc_decl.488              : Multiple procedure declarations and uses of those procedures
    test_program_scope.488          : Just a simple program scope
    test_read_input.488             : Reading into a variable and arrays
    test_stmt_assign_multiple.488   : Two subscopes with simple assignments for multiple variables
    test_stmt_assign_single.488     : A single scope with simple assignments
    test_stmt_if.488                : Some if statements
    test_write_output.488           : Writing expressions as well as string constants and new lines

failing:
    test_add_bool.488                           : Adding boolean expressions together
    test_and_int.488                            : "And"ing integer expressions together
    test_arr_var_not_int.488                    : Assigning a boolean to an integer array
    test_array_bad_bound_order.488              : An array where it defines bounds that are not in increasing order (from index 3 to 0)
    test_array_decl_bound_error.488             : An array where it defines bounds that are not in increasing order (from index -1 to -3)
    test_assign_to_function.488                 : Assigning a value to a function
    test_assign_wrong_type.488                  : Assigning the wrong type to a variable (assigning boolean to integer variable)
    test_bool_equals_int.488                    : Check if a boolean is equal to an integer
    test_call_procedure_no_params.488           : Call a procedure that requires 2 parameters with no arguments
    test_call_undefined_procedure.488           : Call a procedure that has not been declared
    test_compare_bool.488                       : Compare boolean expressions with the "order" operators
    test_conditional_bad_condition.488          : A conditional expression where the condition results in an integer
    test_conditional_results_not_same_type.488  : A conditional expression where the expressions on either side do not yield the same type
    test_duplicate_declaration.488              : Declaring multiple variables with the same identifier
    test_exit_in_function.488                   : Using exit from inside a function
    test_exit_in_main.488                       : Using exit from inside the main program scope
    test_exit_int_zero.488                      : Using exit with a 0 for the number of loops to leave
    test_exit_not_enough_loops.488              : Using exit with not enough loops for the number requested
    test_exit_when_integer.488                  : Using exit where the when expression results in an integer
    test_expr_compare_ops.488                   : Comparing incompatible types
    test_function_duplicate_declaration.488     : Declaring a function and a variable with the same identifier
    test_function_call_wrong_arg_types.488      : Calling a function with the wrong argument types
    test_function_no_args.488                   : Calling a function declared with parameters with no arguments
    test_function_no_return.488                 : Declaring a function with no return statement
    test_function_non_exhaustive_return.488     : Declaring a function with a nonexhaustive set of return statements. i.e. the function can end without returning
    test_function_not_enough_args.488           : Calling a function with not enough arguments
    test_function_proc_duplicate_decl.488       : Declaring a function and a procedure with the same identifier
    test_function_too_many_args.488             : Calling a function with too many arguments
    test_if_integer.488                         : Using an if statement where the condition is an integer
    test_if_stmt_both_checked.488               : Ensuring that both sides of an if statement are considered for semantic analysis
    test_negate_bool.488                        : Negate a boolean expression
    test_not_int.488                            : Taking the boolean not of an integer expression
    test_proc_call_wrong_arg_type.488           : Calling a procedure with the wrong argument types
    test_procedure_not_enough_params.488        : Calling a procedure with not enough arguments
    test_procedure_too_many_params.488          : Calling a procedure with too many arguments
    test_read_bool.488                          : Reading into a boolean variable
    test_read_function.488                      : Reading into a function
    test_read_undefined.488                     : Reading into an undefined variable
    test_repeat_integer.488                     : Repeat loop where the condition is an integer expression
    test_return_bool_from_int_function.488      : Returning a boolean expression from a function with type integer
    test_return_in_main_scope.488               : Return in the main program scope
    test_return_int_from_bool_function.488      : Returning an integer expression from a function with type boolean
    test_return_nothing_from_function.488       : Using the return statement with no result from a function
    test_return_value_from_procedure.488        : Using the return statement with a result expression from a procedure
    test_while_integer.488                      : While loop where the condition is an integer expression
    test_write_bool.488                         : Writing a boolean expression
